buildscript {
	ext {
		springBootVersion = '1.5.10.RELEASE'
	}
	repositories {
		mavenCentral()
        jcenter()
        maven {url "https://plugins.gradle.org/m2/"}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "com.moowork.gradle:gradle-node-plugin:1.1.1"
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin:"com.moowork.node"

springBoot {
    mainClass = 'com.murshid.IngestorApplication'
}

group = 'com.murshid'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.9
targetCompatibility = 1.9

repositories {
	mavenCentral()
	maven {
		url 'https://s3-us-west-2.amazonaws.com/dynamodb-local/release'
	}
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-logging')
	compile 'org.apache.httpcomponents:httpclient:4.5.5'

    // JPA Data (We are going to use Repositories, Entities, Hibernate, etc...)
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'

    // Use MySQL Connector-J
    compile 'mysql:mysql-connector-java'


	compile 'com.google.code.gson:gson:2.8.2'


    //use the following 2 versions specifically for thr HTTP client
    compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.1-m01'
    compile group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.24.1'
    compile group: 'com.google.guava', name: 'guava', version: 'r05'
    compile 'org.jsoup:jsoup:1.11.2'
	compile group: 'com.google.code.findbugs', name: 'jsr305', version: '1.3.9'
	compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.6'
    compile group: 'com.amazonaws', name: 'DynamoDBLocal', version: '[1.11,2.0)'

	testCompile('org.springframework.boot:spring-boot-starter-test')

    testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.1'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.0.1'
}

sourceSets {
    // So that we can place source code in 'src/integrationTest/java':
    integrationTest {
        java {

            // So that we can compile against the business classes (GreeterService, ...):
            compileClasspath += main.output
            // So that we can compile against the libs used by the business classes:
            compileClasspath += main.compileClasspath

            // So that we can compile against the unit test classes (custom utilities fx):
            compileClasspath += test.output
            // So that we can compile against the libs used by the unit test classes (JUnit, Spring test support, ...):
            compileClasspath += test.compileClasspath

            // So that test- and business classes can be used at runtime:
            runtimeClasspath += test.runtimeClasspath

        }
    }
}

task integrationTest(type: Test) {

    // So that Gradle knows where the integration test classes are:
    testClassesDir = sourceSets.integrationTest.output.classesDir

    // So that Gradle knows which runtime class path to use:
    classpath = sourceSets.integrationTest.runtimeClasspath

}

node{
    version = "7.5.0"
    download = true
    nodeModulesDir = file("frontend")
}

task buildClientDev(type: NpmTask, dependsOn: 'npmInstall'){
    group = 'build'
    description = 'Compile client side folder for development'
    args = ['run','buildDev']
}

task buildClientWatch(type: NpmTask, dependsOn: 'npmInstall'){
    group = 'application'
    description = "Build and watches the client side assets for rebuilding"
    args = ['run','buildWatch']
}

task buildClient(type:NpmTask, dependsOn:'npmInstall'){
    group = 'build'
    description = "Compile client side folder for production"
    args = ['run','build']
}

bootRun.dependsOn(buildClientDev)

jar.dependsOn(buildClient)
